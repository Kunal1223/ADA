import java.util.Arrays;

class Graph {
     int vertices;
     int[][] adjacencyMatrix;
     int INF = Integer.MAX_VALUE;

    public Graph(int v) {
        vertices = v;
        adjacencyMatrix = new int[v][v];
        for (int i = 0; i < v; i++) {
            Arrays.fill(adjacencyMatrix[i], INF);
        }
    }

    public void addEdge(int u, int v, int weight) {
        adjacencyMatrix[u][v] = weight;
        adjacencyMatrix[v][u] = weight; // Assuming an undirected graph
    }

    public void dijkstra(int start) {
        int[] distance = new int[vertices];
        boolean[] visited = new boolean[vertices];

        Arrays.fill(distance, INF);
        distance[start] = 0;

        for (int count = 0; count < vertices - 1; ++count) {
            int u = minDistance(distance, visited);
            visited[u] = true;

            for (int v = 0; v < vertices; ++v) {
                if (!visited[v] && adjacencyMatrix[u][v] != INF &&
                    distance[u] != INF && distance[u] + adjacencyMatrix[u][v] < distance[v]) {
                    distance[v] = distance[u] + adjacencyMatrix[u][v];
                }
            }
        }

        System.out.println("Shortest distances from city " + start + " to all other cities:");
        for (int i = 0; i < vertices; ++i) {
            if (distance[i] != INF) {
                System.out.println("City " + i + ": " + distance[i] + " units");
            } else {
                System.out.println("City " + i + ": Not reachable");
            }
        }
    }

    int minDistance(int[] distance, boolean[] visited) {
        int minDist = INF, minIndex = -1;

        for (int v = 0; v < vertices; ++v) {
            if (!visited[v] && distance[v] <= minDist) {
                minDist = distance[v];
                minIndex = v;
            }
        }

        return minIndex;
    }
}

class DijkstraAlgorithm {
    public static void main(String[] args) {
        // Example usage
        Graph g = new Graph(6);
        g.addEdge(0, 1, 5);
        g.addEdge(0, 2, 3);
        g.addEdge(1, 3, 6);
        g.addEdge(1, 2, 2);
        g.addEdge(2, 4, 4);
        g.addEdge(2, 5, 2);
        g.addEdge(2, 3, 7);
        g.addEdge(3, 5, 1);
        g.addEdge(3, 4, -1);
        g.addEdge(4, 5, -2);

        int startCity = 0;
        g.dijkstra(startCity);
    }
}
